# Dockerfile para ambiente de desenvolvimento
# Cria um container com todas as ferramentas necessárias para desenvolvimento

FROM ubuntu:22.04

# Evitar prompts interativos durante a instalação
ENV DEBIAN_FRONTEND=noninteractive

# Atualizar sistema e instalar dependências básicas
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    vim \
    nano \
    htop \
    tree \
    jq \
    bc \
    unzip \
    software-properties-common \
    ca-certificates \
    gnupg \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

# Instalar Docker CLI
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
    && apt-get update \
    && apt-get install -y docker-ce-cli \
    && rm -rf /var/lib/apt/lists/*

# Instalar Docker Compose
RUN curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose \
    && chmod +x /usr/local/bin/docker-compose

# Instalar clientes de banco de dados
RUN apt-get update && apt-get install -y \
    mysql-client \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Instalar SQL Server tools
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
    && curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | tee /etc/apt/sources.list.d/msprod.list \
    && apt-get update \
    && ACCEPT_EULA=Y apt-get install -y mssql-tools18 \
    && echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc \
    && rm -rf /var/lib/apt/lists/*

# Instalar ferramentas de desenvolvimento
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    nodejs \
    npm \
    && rm -rf /var/lib/apt/lists/*

# Instalar ferramentas Python para análise de dados
RUN pip3 install \
    pandas \
    numpy \
    matplotlib \
    seaborn \
    jupyter \
    sqlalchemy \
    pymysql \
    psycopg2-binary \
    pyodbc

# Instalar Make
RUN apt-get update && apt-get install -y make && rm -rf /var/lib/apt/lists/*

# Configurar timezone
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Criar usuário de desenvolvimento
RUN useradd -m -s /bin/bash developer \
    && usermod -aG docker developer

# Configurar diretório de trabalho
WORKDIR /workspace

# Copiar scripts utilitários
COPY scripts/ /usr/local/bin/db-scripts/
RUN chmod +x /usr/local/bin/db-scripts/*.sh

# Criar aliases úteis
RUN echo 'alias ll="ls -la"' >> /home/developer/.bashrc \
    && echo 'alias la="ls -la"' >> /home/developer/.bashrc \
    && echo 'alias mysql-local="mysql -h mysql_db -u devuser -p"' >> /home/developer/.bashrc \
    && echo 'alias psql-local="psql -h postgres_db -U devuser -d testdb"' >> /home/developer/.bashrc \
    && echo 'alias sqlcmd-local="sqlcmd -S sqlserver_db -U SA"' >> /home/developer/.bashrc

# Configurar prompt personalizado
RUN echo 'export PS1="\[\033[01;32m\]\u@database-dev\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$ "' >> /home/developer/.bashrc

# Instalar extensões do VS Code Server (opcional)
RUN curl -fsSL https://code-server.dev/install.sh | sh

# Porta padrão para code-server
EXPOSE 8080

# Mudar para usuário developer
USER developer

# Comando padrão
CMD ["/bin/bash"]

# Labels para documentação
LABEL maintainer="Database Local Environment"
LABEL description="Ambiente de desenvolvimento com ferramentas para bancos de dados"
LABEL version="1.0"