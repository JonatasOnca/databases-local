#!/usr/bin/env python3
"""
Sistema de Gerenciamento Autom√°tico de Dados - Vers√£o Simplificada
=================================================================

Vers√£o sem depend√™ncia do SQL Server para demonstra√ß√£o
"""

import time
import random
import datetime
import logging
from typing import Dict, List, Any
import os
import sys
import signal
import threading

# Depend√™ncias necess√°rias (apenas MySQL e PostgreSQL)
try:
    import pymysql
    import psycopg2
except ImportError as e:
    print(f"‚ùå Erro: Depend√™ncia n√£o encontrada: {e}")
    print("üì¶ Instale as depend√™ncias com:")
    print("   pip install pymysql psycopg2-binary")
    sys.exit(1)

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/Users/jonatasonca/Desktop/TecOnca/Projetos/databases-local/logs/auto-data-demo.log'),
        logging.StreamHandler()
    ]
)

class DatabaseConfig:
    """Configura√ß√£o de conex√£o com os bancos de dados"""
    
    MYSQL = {
        'host': 'localhost',
        'port': 3306,
        'user': 'devuser', 
        'password': 'DevP@ssw0rd!',
        'database': 'testdb',
        'charset': 'utf8mb4'
    }
    
    POSTGRES = {
        'host': 'localhost',
        'port': 5432,
        'user': 'devuser',
        'password': 'DevP@ssw0rd!',
        'database': 'testdb'
    }

class DataManager:
    """Gerenciador autom√°tico de dados"""
    
    def __init__(self, database_type: str = 'mysql'):
        self.database_type = database_type
        self.connection = None
        self.running = False
        self.thread = None
        
        # Dados para simula√ß√£o
        self.sample_names = [
            'Ana Costa', 'Bruno Lima', 'Carlos Pereira', 'Diana Silva', 'Eduardo Santos',
            'Fernanda Oliveira', 'Gabriel Ferreira', 'Helena Rodrigues', 'Igor Almeida',
            'Juliana Nascimento'
        ]
        
        self.sample_products = [
            ('Smartphone Samsung', 1200.00), ('iPhone 15', 5000.00), ('Tablet iPad', 3000.00),
            ('Notebook Gamer', 4500.00), ('Headset Bluetooth', 250.00), ('Smartwatch', 800.00)
        ]
        
        self.sample_messages = [
            'Opera√ß√£o autom√°tica executada', 'Dados atualizados pelo sistema',
            'Sincroniza√ß√£o de dados realizada', 'Sistema operando normalmente'
        ]
    
    def connect(self) -> bool:
        """Estabelece conex√£o com o banco de dados"""
        try:
            if self.database_type == 'mysql':
                self.connection = pymysql.connect(**DatabaseConfig.MYSQL)
            elif self.database_type == 'postgres':
                self.connection = psycopg2.connect(**DatabaseConfig.POSTGRES)
            
            logging.info(f"‚úÖ Conectado ao {self.database_type.upper()}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Erro ao conectar com {self.database_type}: {e}")
            return False
    
    def disconnect(self):
        """Fecha a conex√£o com o banco de dados"""
        if self.connection:
            self.connection.close()
            logging.info(f"üîå Desconectado do {self.database_type.upper()}")
    
    def execute_query(self, query: str, params: tuple = None) -> Dict[str, Any]:
        """Executa uma query no banco de dados"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(query, params or ())
            
            result = {
                'success': True,
                'rowcount': cursor.rowcount,
                'lastrowid': None
            }
            
            # Para MySQL, capturar o √∫ltimo ID inserido
            if self.database_type == 'mysql' and 'INSERT' in query.upper():
                result['lastrowid'] = cursor.lastrowid
            
            self.connection.commit()
            cursor.close()
            
            return result
            
        except Exception as e:
            logging.error(f"‚ùå Erro ao executar query: {e}")
            self.connection.rollback()
            return {'success': False, 'error': str(e)}
    
    def get_random_existing_id(self, table: str, id_column: str = 'id') -> int:
        """Obt√©m um ID aleat√≥rio existente de uma tabela"""
        try:
            cursor = self.connection.cursor()
            if self.database_type == 'postgres':
                cursor.execute(f"SELECT {id_column} FROM {table} ORDER BY RANDOM() LIMIT 1")
            else:
                cursor.execute(f"SELECT {id_column} FROM {table} ORDER BY RAND() LIMIT 1")
            result = cursor.fetchone()
            cursor.close()
            return result[0] if result else None
        except:
            return None
    
    def insert_cliente(self) -> bool:
        """Insere um novo cliente"""
        nome = random.choice(self.sample_names)
        email = f"{nome.lower().replace(' ', '.')}_{random.randint(1000, 9999)}@email.com"
        
        query = "INSERT INTO clientes (nome, email) VALUES (%s, %s)"
        result = self.execute_query(query, (nome, email))
        
        if result['success']:
            logging.info(f"‚ûï Cliente inserido: {nome} ({email})")
            return True
        return False
    
    def update_cliente(self) -> bool:
        """Atualiza um cliente existente"""
        cliente_id = self.get_random_existing_id('clientes')
        if not cliente_id:
            return False
        
        novo_nome = random.choice(self.sample_names) + " (Atualizado)"
        
        query = "UPDATE clientes SET nome = %s WHERE id = %s"
        result = self.execute_query(query, (novo_nome, cliente_id))
        
        if result['success'] and result['rowcount'] > 0:
            logging.info(f"üîÑ Cliente atualizado: ID {cliente_id} -> {novo_nome}")
            return True
        return False
    
    def insert_produto(self) -> bool:
        """Insere um novo produto"""
        nome, preco_base = random.choice(self.sample_products)
        preco = round(preco_base * random.uniform(0.8, 1.2), 2)
        
        query = "INSERT INTO produtos (nome, preco) VALUES (%s, %s)"
        result = self.execute_query(query, (nome, preco))
        
        if result['success']:
            logging.info(f"‚ûï Produto inserido: {nome} (R$ {preco})")
            return True
        return False
    
    def update_produto(self) -> bool:
        """Atualiza um produto existente"""
        produto_id = self.get_random_existing_id('produtos')
        if not produto_id:
            return False
        
        variacao = random.uniform(0.9, 1.15)
        query = "UPDATE produtos SET preco = preco * %s WHERE id = %s"
        result = self.execute_query(query, (variacao, produto_id))
        
        if result['success'] and result['rowcount'] > 0:
            logging.info(f"üîÑ Produto atualizado: ID {produto_id} (pre√ßo ajustado em {(variacao-1)*100:.1f}%)")
            return True
        return False
    
    def insert_log(self) -> bool:
        """Insere uma entrada no log"""
        mensagem = random.choice(self.sample_messages)
        
        query = "INSERT INTO logs (mensagem) VALUES (%s)"
        result = self.execute_query(query, (mensagem,))
        
        if result['success']:
            logging.info(f"üìù Log inserido: {mensagem}")
            return True
        return False
    
    def execute_operations_cycle(self):
        """Executa um ciclo completo de opera√ß√µes"""
        operations = [
            ('INSERT Cliente', self.insert_cliente),
            ('UPDATE Cliente', self.update_cliente),
            ('INSERT Produto', self.insert_produto),
            ('UPDATE Produto', self.update_produto),
            ('INSERT Log', self.insert_log)
        ]
        
        # Executar 2-3 opera√ß√µes aleat√≥rias por ciclo
        num_operations = random.randint(2, 3)
        selected_operations = random.sample(operations, num_operations)
        
        success_count = 0
        for operation_name, operation_func in selected_operations:
            try:
                if operation_func():
                    success_count += 1
                time.sleep(1)  # Pequena pausa entre opera√ß√µes
            except Exception as e:
                logging.error(f"‚ùå Erro na opera√ß√£o {operation_name}: {e}")
        
        logging.info(f"‚úÖ Ciclo conclu√≠do: {success_count}/{len(selected_operations)} opera√ß√µes executadas com sucesso")
    
    def run_demo(self, duration_seconds: int = 30):
        """Executa uma demonstra√ß√£o por tempo limitado"""
        logging.info(f"üöÄ Iniciando demonstra√ß√£o do gerenciamento autom√°tico ({self.database_type.upper()})")
        logging.info(f"‚è∞ Dura√ß√£o: {duration_seconds} segundos")
        
        start_time = time.time()
        cycles = 0
        
        while time.time() - start_time < duration_seconds:
            try:
                cycles += 1
                logging.info(f"üîÑ Executando ciclo {cycles}")
                self.execute_operations_cycle()
                
                # Aguardar pr√≥ximo ciclo (m√°ximo 10 segundos)
                wait_time = min(10, duration_seconds - (time.time() - start_time))
                if wait_time > 0:
                    time.sleep(wait_time)
                    
            except Exception as e:
                logging.error(f"‚ùå Erro no ciclo {cycles}: {e}")
                time.sleep(2)
        
        logging.info(f"üéâ Demonstra√ß√£o conclu√≠da! Executados {cycles} ciclos em {duration_seconds} segundos")

def main():
    """Fun√ß√£o principal"""
    
    # Verificar argumentos
    database_type = sys.argv[1] if len(sys.argv) > 1 else 'mysql'
    duration = int(sys.argv[2]) if len(sys.argv) > 2 else 30
    
    if database_type not in ['mysql', 'postgres']:
        print("‚ùå Tipo de banco inv√°lido. Use: mysql ou postgres")
        sys.exit(1)
    
    print(f"""
üóÑÔ∏è  Sistema de Gerenciamento Autom√°tico - DEMO
==============================================
üéØ Banco: {database_type.upper()}
‚è∞ Dura√ß√£o: {duration} segundos
üìä Opera√ß√µes: INSERT e UPDATE autom√°ticos
===============================================
    """)
    
    # Criar e iniciar o gerenciador
    manager = DataManager(database_type)
    
    if manager.connect():
        try:
            manager.run_demo(duration)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  Demo interrompida pelo usu√°rio")
        finally:
            manager.disconnect()
    else:
        print("‚ùå Falha ao conectar ao banco!")
        sys.exit(1)

if __name__ == "__main__":
    main()