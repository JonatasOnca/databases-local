#!/bin/bash

# Script para configura√ß√£o autom√°tica baseada na arquitetura
# Detecta o sistema e sugere a melhor configura√ß√£o

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Detectando arquitetura do sistema...${NC}"

# Detectar arquitetura
ARCH=$(uname -m)
OS=$(uname -s)

echo -e "üìä Sistema: ${GREEN}$OS${NC}"
echo -e "üèóÔ∏è  Arquitetura: ${GREEN}$ARCH${NC}"

# Recomenda√ß√µes baseadas na arquitetura
case $ARCH in
    "arm64")
        echo -e "\n${YELLOW}üçé Mac M1/M2 (ARM64) detectado${NC}"
        echo -e "üìù Recomenda√ß√µes:"
        echo -e "  ‚úÖ MySQL e PostgreSQL: ${GREEN}Nativos (performance total)${NC}"
        echo -e "  ‚ö†Ô∏è  SQL Server: ${YELLOW}Emula√ß√£o x86_64 (performance reduzida)${NC}"
        echo -e "\nüí° Sugest√µes:"
        echo -e "  ‚Ä¢ Para desenvolvimento r√°pido: ${BLUE}make up-native${NC} (MySQL + PostgreSQL)"
        echo -e "  ‚Ä¢ Para ambiente completo: ${BLUE}make up${NC} (inclui SQL Server)"
        ;;
    "x86_64")
        echo -e "\n${GREEN}üíª Arquitetura x86_64 detectada${NC}"
        echo -e "‚úÖ Todas as imagens s√£o nativas - performance total em todos os bancos"
        echo -e "\nüí° Sugest√£o: ${BLUE}make up${NC} (ambiente completo)"
        ;;
    *)
        echo -e "\n${RED}‚ùì Arquitetura n√£o reconhecida: $ARCH${NC}"
        echo -e "‚ö†Ô∏è  Pode haver problemas de compatibilidade"
        ;;
esac

# Verificar se Docker est√° instalado
echo -e "\n${BLUE}üê≥ Verificando Docker...${NC}"
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version | cut -d ' ' -f3 | cut -d ',' -f1)
    echo -e "‚úÖ Docker ${GREEN}$DOCKER_VERSION${NC} instalado"
else
    echo -e "${RED}‚ùå Docker n√£o encontrado${NC}"
    echo -e "üìã Instale o Docker Desktop: https://www.docker.com/products/docker-desktop"
    exit 1
fi

# Verificar se Docker Compose est√° dispon√≠vel
if command -v docker-compose &> /dev/null; then
    COMPOSE_VERSION=$(docker-compose --version | cut -d ' ' -f3 | cut -d ',' -f1)
    echo -e "‚úÖ Docker Compose ${GREEN}$COMPOSE_VERSION${NC} instalado"
elif docker compose version &> /dev/null; then
    COMPOSE_VERSION=$(docker compose version | cut -d ' ' -f4)
    echo -e "‚úÖ Docker Compose ${GREEN}$COMPOSE_VERSION${NC} (plugin) instalado"
else
    echo -e "${RED}‚ùå Docker Compose n√£o encontrado${NC}"
    exit 1
fi

# Verificar recursos dispon√≠veis
echo -e "\n${BLUE}üìä Verificando recursos do sistema...${NC}"

# Mem√≥ria dispon√≠vel (funciona no macOS e Linux)
if [[ "$OS" == "Darwin" ]]; then
    TOTAL_MEM=$(( $(sysctl -n hw.memsize) / 1024 / 1024 ))
else
    TOTAL_MEM=$(free -m | awk 'NR==2{print $2}')
fi

echo -e "üíæ Mem√≥ria total: ${GREEN}${TOTAL_MEM}MB${NC}"

if [ $TOTAL_MEM -lt 4096 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Mem√≥ria baixa detectada (<4GB)${NC}"
    echo -e "üí° Considere usar apenas 1-2 bancos simultaneamente"
elif [ $TOTAL_MEM -lt 8192 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Mem√≥ria moderada (4-8GB)${NC}"
    echo -e "üí° Recomendado usar profiles para bancos espec√≠ficos"
else
    echo -e "‚úÖ Mem√≥ria suficiente para todos os bancos"
fi

echo -e "\n${GREEN}üéâ Verifica√ß√£o conclu√≠da!${NC}"
echo -e "üìö Consulte o README.md para comandos dispon√≠veis"